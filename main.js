!function(){"use strict";var e={d:function(t,s){for(var r in s)e.o(s,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:s[r]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};e.d({},{b:function(){return O}});class t{constructor(e,t,s,r){this._text=e.name,this._link=e.link,this._alt=e.name,this._likes=e.likes,this._likesNum=e.likes.length,this._userId=e.userID,this._ownerId=e.owner._id,this._photoId=e._id,this._cardTemplate=document.querySelector("#elements-item").content.querySelector(t),this._cardSelector=t,this._handleCardClick=s,this._handleLike=r}_checkIfLiked(){return this._likes.some((e=>e._id===this._userId))}_renderLikes(){this._likeDgt=this._element.querySelector(".elements__like-number"),this._likeDgt.textContent=this._likesNum,this._checkIfLiked()?this._likeBtn.classList.add("elements__like-button_pressed"):this._likeBtn.classList.remove("elements__like-button_pressed")}_toggleLikeBtn(){this._likeBtn.classList.toggle("elements__like-button_pressed")}_addEventListeners(){this._likeBtn.addEventListener("click",(()=>{this._toggleLikeBtn(),this._handleLike()})),this._deleteBtn.addEventListener("click",(e=>{O.id=this._photoId,O.open(),O.removeElement=()=>{this._element.remove(),this._element=null}})),this._image.addEventListener("click",(()=>{this._handleCardClick()}))}updateLikes(e){this._likes=e,this._likesNum=e.length,this._renderLikes()}createCard(){return this._element=this._cardTemplate.cloneNode(!0),this._likeBtn=this._element.querySelector(".elements__like-button"),this._deleteBtn=this._element.querySelector(".elements__delete-button"),this._ownerId!==this._userId&&this._deleteBtn.remove(),this._renderLikes(),this._image=this._element.querySelector(".elements__img"),this._image.src=this._link,this._image.alt=this._alt,this._element.querySelector(".elements__title").textContent=this._text,this._addEventListeners(),this._element}}class s{constructor(e,t){this._settings=e,this._form=t}_checkValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_toggleButtonState(){this._inputs.every((e=>e.validity.valid))?(this._button.disabled=!1,this._button.classList.remove(this._settings.inactiveButtonClass)):(this._button.disabled=!0,this._button.classList.add(this._settings.inactiveButtonClass))}_showError(e){const t=e.validationMessage;this._form.querySelector(`#${e.id}-error`).textContent=t,e.classList.add(this._settings.inputErrorClass)}_hideError(e){this._form.querySelector(`#${e.id}-error`).textContent="",e.classList.remove(this._settings.inputErrorClass)}resetValidation(){this._toggleButtonState(),this._inputs.forEach((e=>{this._hideError(e)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._inputs=[...this._form.querySelectorAll(this._settings.inputSelector)],this._button=this._form.querySelector(this._settings.submitButtonSelector),this._inputs.forEach((e=>{e.addEventListener("input",(t=>{this._checkValidity(e),this._toggleButtonState()}))})),this.resetValidation()}}class r{constructor(e){this._popup=document.querySelector(e)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_closeOnClickOutside=e=>{e.target===e.currentTarget&&this.close()};setEventListeners(){this._popup.querySelector(".modal__close").addEventListener("click",this.close),document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("mousedown",this._closeOnClickOutside)}open(){this.setEventListeners(),this._popup.classList.add("modal_open")}close=()=>{this._popup.querySelector(".modal__close").removeEventListener("click",this.close),document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("mousedown",this._closeOnClickOutside),this._popup.classList.remove("modal_open")}}class i extends r{constructor(e,t){super(e),this._handleSubmit=t,this._formElement=this._popup.querySelector(".modal__form")}_getInputValues(){const e=[...this._formElement.querySelectorAll(".modal__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}_submitCallback=e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())};setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",this._submitCallback)}close(){super.close(),this._formElement.reset(),this._formElement.removeEventListener("submit",this._submitCallback)}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};function o(e,t){t.textContent=e?"Saving...":"Save"}const l=document.querySelector(".profile__info-edit"),a=document.querySelector(".profile__add-button"),_=document.querySelector(".profile__avatar"),d=document.querySelector(".modal_type_edit-profile"),c=document.querySelector(".modal_type_add-card"),h=document.querySelector(".modal_type_change-avatar"),u=c.querySelector(".modal__form"),m=d.querySelector(".modal__form"),p=h.querySelector(".modal__form"),f=document.querySelector(".modal__input_field_title"),k=document.querySelector(".modal__input_field_image-link"),b=document.querySelector(".modal__input_field_name"),g=document.querySelector(".modal__input_field_profession"),y=document.querySelector(".profile__title"),E=document.querySelector(".profile__subtitle"),v=document.querySelector(".profile__avatar"),S=document.querySelector(".elements");let C;const L=new class{constructor(e){this._headers=e.headers,this._baseUrl=e.baseUrl}_getResponseData(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._getResponseData)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._getResponseData)}editProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._getResponseData)}addCardApi(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._getResponseData)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._getResponseData)}like(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._getResponseData)}unlike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._getResponseData)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._getResponseData)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"e0cd9749-f008-4064-bc64-61e9ac8b0f57","Content-Type":"application/json"}});L.getUserInfo().then((e=>{y.textContent=e.name,E.textContent=e.about,v.src=e.avatar,C=e._id})).catch((e=>console.log(`Error.....: ${e}`)));const q={nameSelector:y,jobSelector:E},I=new class{constructor(e){this._name=e.nameSelector,this._job=e.jobSelector}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.about}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}}(q),w=new s(n,u);w.enableValidation();const $=new s(n,m);$.enableValidation(),new s(n,p).enableValidation();const x=new class extends r{open(e){this._popup.querySelector(".modal__image").src=e.link,this._popup.querySelector(".modal__image").alt=e.name,this._popup.querySelector(".modal__caption").textContent=e.name,super.open()}}(".modal_img"),B=new i(".modal_type_add-card",(e=>{const t=B._formElement.lastElementChild;o(!0,t);const s={name:f.value,link:k.value};L.addCardApi(s).then((e=>{B.close(),V.addItemStart(j(e))})).catch((e=>console.log(`Error.....: ${e}`))).finally((()=>o(!1,t)))})),U=new i(".modal_type_edit-profile",(e=>{const t=U._formElement.lastElementChild;o(!0,t);const s={name:e.name,about:e.profession};y.textContent=s.name,E.textContent=s.about,I.setUserInfo(s),L.editProfile(s).then((()=>U.close())).catch((e=>console.log(`Error.....: ${e}`))).finally((()=>o(!1,t)))})),D=new i(".modal_type_change-avatar",(e=>{const t=D._formElement.lastElementChild;o(!0,t),L.updateAvatar(e).then((()=>D.close())).catch((e=>console.log(`Error.....: ${e}`))).finally((()=>o(!1,t)))})),O=new i(".modal_type_delete-card",(e=>{L.deleteCard(O.id).then((()=>{O.close(),O.removeElement()})).catch((e=>console.log(`Error.....: ${e}`))).finally(O.close())}));function j(e){e.userID=C;const s=new t(e,".elements__item",(()=>{x.open(e)}),(()=>{s._checkIfLiked()?L.unlike(e._id).then((e=>{s.updateLikes(e.likes)})).catch((e=>console.log(`Error.....: ${e}`))):L.like(e._id).then((e=>{s.updateLikes(e.likes)})).catch((e=>console.log(`Error.....: ${e}`)))}));return s.createCard()}_.addEventListener("click",(()=>{D.open()})),l.addEventListener("click",(()=>{const e=I.getUserInfo();b.value=e.name,g.value=e.job,U.open(),$.resetValidation()})),a.addEventListener("click",(()=>{B.open(),w.resetValidation()})),L.getInitialCards().then((e=>{V.render(e)})).catch((e=>console.log(`Error.....: ${e}`)));const V=new class{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._cardSelector=s}render(e){e.forEach(this._renderer)}addItem(e){this._cardSelector.append(e)}addItemStart(e){this._cardSelector.prepend(e)}}({renderer:e=>{V.addItem(j(e))}},S)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,